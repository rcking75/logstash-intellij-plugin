import org.jetbrains.grammarkit.tasks.GenerateLexer
import org.jetbrains.grammarkit.tasks.GenerateParser

plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '0.4.25'
    id 'org.jetbrains.grammarkit' version '2021.3.2'
    id 'org.jetbrains.kotlin.jvm' version '1.5.21'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
    mavenLocal()
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'org.jetbrains.intellij'
apply plugin: 'org.jetbrains.grammarkit'

def isCI = System.getenv('CI')
def ideaVersionExternDefinition = System.getenv('IDEA_VERSION')
ideaVersion = ideaVersionExternDefinition ? ideaVersionExternDefinition : ideaVersion
def isEAP = ideaVersion.contains('LATEST-EAP-SNAPSHOT') || ideaVersion.take(4).contains('.')
def artifactVersion = pluginVersion + '-' + (isEAP ? 'EAP' : ideaVersion)

version artifactVersion
group pluginGroup

println "IdeaVersion is : ${ideaVersion}"
println "ArtifactVersion is : ${artifactVersion}"

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.13'
}

sourceSets {
    main {
        java {
            srcDirs += 'src/main/gen'
        }
    }
    test {
        resources.srcDirs 'testData'
    }
}

idea {
    module {
        generatedSourceDirs += file('src/main/gen')
    }
}

intellij {
    pluginName pluginName
    version ideaVersion
    println "Building for IntelliJ version: ${version}"
    sandboxDirectory = "${rootProject.projectDir}/idea-sandbox/idea-${ideaVersion}"
}

task generateLogstashConfigParser(type: GenerateParser) {
    println "Generating Parser for GrammerKit: ${grammarKit.grammarKitRelease}"
    source 'grammar/Logstash.bnf'
    targetRoot = 'src/main/gen'
    pathToParser 'com/github/redfoos/logstash/LogstashParser.java'
    pathToPsiRoot 'com/github/redfoos/logstash/psi'
}

task generateLogstashConfigLexer(type: GenerateLexer) {
    dependsOn generateLogstashConfigParser
    println "Generating Lexer for JFlexRelease: ${grammarKit.jflexRelease}"

    source = 'grammar/Logstash.flex'
    targetDir = 'src/main/gen/com/github/redfoos/logstash'
    targetClass = 'LogstashLexer'
}

jacocoTestReport {
    sourceSets sourceSets.main
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

publishPlugin {
    token System.getenv('IJ_REPO_TOKEN')
}

compileJava.dependsOn generateLogstashConfigLexer
check.dependsOn jacocoTestReport

clean.doFirst {
    delete 'gen', 'out'
}

patchPluginXml {
    version artifactVersion

    pluginDescription(file(descriptionFile).text)
    changeNotes(file(changesFile).text)
}

test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
    if (isCI) {
        testLogging.events = ['passed', 'skipped', 'failed', 'standardOut', 'standardError']
        testLogging.exceptionFormat 'full'
    }

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: ${descriptor}")
    }
}

wrapper {
    gradleVersion = '6.3'
}
